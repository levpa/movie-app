trigger:
  batch: true
  branches:
    include: 
    - master
variables:
  buildConfiguration: 'Release'
  vmImageName: 'Ubuntu-20.04'
  
stages:
- stage: scan
  jobs:
    - job: analysis
      steps:
        - script: echo " code static analysis ........ "
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              Write-Host " Files in the directory: "
              Write-Host "$(Build.SourcesDirectory"
              Get-ChildItem $(Build.SourcesDirectory)
# Build Stage
- stage: BuildAndTest
  dependsOn: scan
  jobs:
  - job: BuildAndTest
    pool:
      vmImage: $(vmImageName)
    steps:
    # Build and publish the application library
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
    # Publish the app as an artifact
    - publish: $(Build.StagingDirectory)
      artifact: app
      
# Staging release
- stage: Staging
  jobs:
  - job: Release
    pool:
      vmImage: $(vmImageName)
    steps:
    # Don't clone the repo
    - checkout: none

    # Download the published application artifact
    - download: current
      artifact: app

    # # Release the app
    # - task: AzureRmWebAppDeployment@4
    #   inputs:
    #     ConnectionType: 'AzureRM'
    #     azureSubscription: 'AzureSC'
    #     WebAppName: 'csweb08012021'
    #     ResourceGroupName: csweb-rg
    #     DeployToSlotOrASEFlag: True
    #     SlotName: staging
    #     package: '$(Pipeline.Workspace)/**/*.zip'
    #     WebAppKind: WebApp
